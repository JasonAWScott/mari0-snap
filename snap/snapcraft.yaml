%YAML 1.1
---
# Snapcraft Recipe for Mari0
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft
name: mari0
summary: Mario + Portal platformer
description: |
  Two genre defining games from completely different eras: Nintendo's Super Mario Bros. and Valve's Portal. These two games managed to give Platformers and First-Person Puzzle Games a solid place in the video game world. But what if Nintendo teamed up with Valve and recreated the famous Mario game with Portal gun mechanics?

  A complete from scratch recreation of Super Mario Bros. with a focus on perfectly imitating the feel the 1985 classic gave us. Then give Mario a portal gun, add puzzle game mechanics from Portal and there you go. And if that wasn't crazy enough, play 4-player coop, with everyone having their own Portal gun!

  ## Features ##
  -   Complete recreation of SMB
  -   Elements from Portal
  -   Portal gun that shoots portals
  -   4-player simultaneous coop
  -   Level Editor that was used to create the levels in the game
  -   33 different hats
  -   Downloadable Mappacks
  -   Game modifiers for extra fun

  NOTE: This is NOT an official Mari0 distribution, refer the [issue tracker](https://github.com/Lin-Buo-Ren/mari0-snap/issues) for more details

icon: snap/gui/mari0-icon.256px.scaled.png
version: determined-by-version-script
version-script: ./snap/local/build-utilities/set-snap-version.bash

confinement: strict
grade: stable

plugs:
  # For snaps with a graphical user interface:
  desktop:
  desktop-legacy:
  x11:
  unity7:
  wayland:

  # Storage access
  #home:
  #removable-media: # Non-A/C

  # Network access
  #network:

parts:
  # Utility programs to help with package building
  build-utilities:
    source: snap/local/build-utilities
    plugin: dump
    organize:
      '*': assets/build-utilities/
    prime:
    - -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Program patches to solve issues that can't be solved by tweaking in runtime
  patches:
    source: snap/local/patches
    plugin: dump
    organize:
      '*': assets/patches/
    prime:
    - -*

  # Helper programs that can be called at snap runtime
  helpers:
    source: snap/local/helpers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Remote part for fixing the glibc locales(and gnu gettext I18N support)
  # This part is only required for non GUI apps that don't uses the desktop-launch launchers
  #locales-launch:

  # Remote part for recording the exact revision for each part during building
  parts-meta-info:

  # Remote part for support of various desktop technologies
  # Refer: https://github.com/ubuntu/snapcraft-desktop-helpers/blob/master/snapcraft.yaml
  desktop-gtk3: # for zenity

  # Optional auxiliary part for displaying simple dialogs for better user experience, powered by Zenity
  # https://forum.snapcraft.io/t/the-zenity-remote-part/8793
  zenity:
    # This part or part recipe is needed until LP#1766878 is fixed
    #
    # Bug #1766878 “$SNAPCRAFT_PROJECT_NAME used in a remote part expands to wrong value” : Bugs : Snapcraft
    # https://bugs.launchpad.net/snapcraft/+bug/1766878
    configflags:
    - --datarootdir=/snap/$SNAPCRAFT_PROJECT_NAME/current/share
    - --disable-libnotify
    - --disable-webkitgtk
    organize:
      snap/$SNAPCRAFT_PROJECT_NAME/current: /

  mari0:
    after:
    - build-utilities # for patch-desktop-entries.*

    source: snap/local/empty
    #source-type:
    #source-tag:
    #source-depth:

    plugin: nil

    override-stage: |
      set \
        -o errexit \
        -o nounset

      snapcraftctl stage

      ./assets/build-utilities/patch-desktop-entries.bash

apps:
  mari0:
    # The command to run the application, the base command should be an *relative path* to an executable file rooted from the `prime` directory (for `classic` confinement compatiblity, where command search PATHs under $SNAP isn't set for library compatiblity reasons).  The arguments are usually other launchers' *absolute path* rooted from the $SNAP environment variable that are *stacked over* previous ones to consolidate their runtime environment modifications.
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: >
      bin/desktop-launch
      "${SNAP}"/bin/mari0-launch
      "${SNAP}"/bin/zenity
        --info
        --ok-label='Got it'
        --title='My Awesome App'
        --text='This is a demonstrative application for Snapcrafters Template Plus.\nIt indicates that the snapped application has been launched properly.'
        --window-icon="${SNAP}"/snap/gui/mari0.png
        --width=600

    # If the providing part of the app. has a desktop entry, specify its path relative to the `prime` directory.
    # If the packaging target doesn't provide a desktop entry, ignore the `desktop` key and implement a desktop entry in `/snap/gui`
    #desktop: share/applications/mari0.desktop
