%YAML 1.2
---
# Snapcraft Recipe for [Project]
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * Snapcraft.yaml reference
#   https://forum.snapcraft.io/t/snapcraft-yaml-reference/4276
# * The snapcraft syntax
#   https://docs.snapcraft.io/build-snaps/syntax
# * Snap Docs
#   https://snapdocs.labix.org
# * Latest doc topics in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

# All following comments, including this one, are designed to be stripped
# before contributing the recipe to the upstream

# my-awesome-app, my-app-name, my-app-command, my-app-launch, my-app-part
# are placeholders text meant to be replaced by appropriate content

name: my-awesome-app
summary: Single-line elevator pitch for your amazing snap under 79 chars.
description: |
  This is my-awesome-app's description. You have a paragraph or two to tell
  the most important story about your snap. Keep it under 100 words though,
  we live in tweetspace and your description wants to look good in the snap
  store.

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
version: determined-by-version-script

# (OPTIONAL) The version string can also be dynamically determined via scripting
# , in this case the value of the `version` key will be ignored (but the key is
# still required).
# NOTE: The resulting version string cannot be longer than 32 characters
version-script: ./snap/local/utilities/set-snap-version.bash
#version-script: git -C parts/my-app-part/src describe --always --dirty --tags

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: devmode

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: devel

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/my-awesome-app.png

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  my-app-name:
    # The executable path relative to $SNAP to run the application, or a searchable
    # command in the snap runtime's $PATH(not available in `classic` confinement)
    command: bin/my-awesome-app-launch
    # If the providing part of the app. has a desktop entry, specify its path relative to the `prime` directory.
    # If the packaging target doesn't provide a desktop entry, ignore the `desktop` key and implement a desktop entry in `/snap/gui`
    #desktop: share/applications/my-app-name.desktop

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interfaces - doc - snapcraft.io
# https://forum.snapcraft.io/t/interfaces/6154
# Non-A/C: Non-autoconnect interface
plugs:
  # For snaps with a graphical user interface:
  desktop:
  desktop-legacy:
  x11:
  unity7:
  wayland:

  # Storage access
  #- home:
  #- removable-media: # Non-A/C

#slots:

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://forum.snapcraft.io/t/scriptlets/4892
parts:
  # Assets from the snap packaging, refer each READMEs under the `snap` folder for more information
  assets:
    source: snap/local
    plugin: dump

    override-build: ./utilities/install-assets.bash

    prime:
    - -utilities
    - -patches

  # Remote part for support of various desktop technologies
  # Refer: https://github.com/ubuntu/snapcraft-desktop-helpers/blob/master/snapcraft.yaml
  desktop-gtk3: # for yad

  # Optional auxiliary part for displaying simple dialogs for better user experience, powered by the Yet Another Dialog
  yad:
    plugin: nil
    stage-packages:
    - yad

  my-app-part:
    after:
    - assets # for /snap/local/utilities/patch-desktop-entries

    #source:
    #source-type:
    #source-tag:
    #source-depth:

    plugin: nil

    override-stage: |
      set \
        -o errexit \
        -o nounset

      snapcraftctl stage

      utilities/patch-desktop-entries.bash
